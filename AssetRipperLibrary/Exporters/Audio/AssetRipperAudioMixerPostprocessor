using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System;
using System.Reflection;

/// <summary>
/// This script is AssetRipper's patch for exported audio effects to recover effect parameter names when Unity imports each audio mixer.
/// Unity does not serialize the parameter names in a release asset, so it is impossible to recover them by AssetRipper.
/// Fortunately, there is an internal function <c>AudioMixerEffectController.PreallocateGUIDs</c> in UnityEditor.dll, which can make the deal.
/// This function is used by Unity Editor when creating a new audio effect. It collects a list of runtime audio effects,
/// retrieves parameter definitions for each, and updates the parameter names and GUIDs in the caller AudioMixerEffectController.
/// Moreover, this function won't update the GUID for a parameter if it already has a non-empty GUID,
/// which is the case in exported audio effects, perfectly matching our needs.
/// </summary>
public class AssetRipperAudioMixerPostprocessor : AssetPostprocessor
{
    private static readonly Type AudioMixerEffectControllerType;
    private static readonly MethodInfo PreallocateGUIDsMethod;
    private static readonly MethodInfo GetAudioEffectNamesMethod;

    static AssetRipperAudioMixerPostprocessor()
    {
        var editorAssembly = typeof(AssetPostprocessor).Assembly;
        AudioMixerEffectControllerType = editorAssembly.GetType("UnityEditor.Audio.AudioMixerEffectController", true);
        PreallocateGUIDsMethod = AudioMixerEffectControllerType.GetMethod("PreallocateGUIDs", BindingFlags.Public | BindingFlags.Instance);
        Debug.Assert(PreallocateGUIDsMethod != null);

        var mixerEffectDefinitionsType = editorAssembly.GetType("UnityEditor.Audio.MixerEffectDefinitions", true);
        GetAudioEffectNamesMethod = mixerEffectDefinitionsType.GetMethod("GetAudioEffectNames", BindingFlags.Public | BindingFlags.Static);
        Debug.Assert(GetAudioEffectNamesMethod != null);
    }

    static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths)
    {
        bool firstTime = true;

        foreach (var importedAsset in importedAssets)
        {
            if (importedAsset.EndsWith(".mixer"))
            {
                foreach (var asset in AssetDatabase.LoadAllAssetsAtPath(importedAsset))
                {
                    if (asset.GetType() == AudioMixerEffectControllerType)
                    {
                    	if (firstTime)
                        {
                            firstTime = false;
                            var effectNames = GetAudioEffectNamesMethod.Invoke(null, Array.Empty<object>()) as string[];
                            Debug.Log($"MixerEffectDefinitions.GetAudioEffectNames returns [{String.Join(", ", effectNames)}]");
                        }
                        PreallocateGUIDsMethod.Invoke(asset, Array.Empty<object>());
                        Debug.Log($"AudioMixerEffectController.PreallocateGUIDs has been called on {asset}");
                        EditorUtility.SetDirty(asset);
                    }
                }
            }
        }
    }
}
